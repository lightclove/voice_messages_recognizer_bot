import os
import asyncio
import subprocess
import json

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command

from vosk import Model, KaldiRecognizer, SetLogLevel
from dotenv import load_dotenv

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Vosk –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# SetLogLevel(-1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π Vosk
models = {
    "en": Model("vosk-model-small-en-us-0.15"),
    "ru": Model("vosk-model-small-ru-0.4"),
    "es": Model("vosk-model-small-es-0.42")
}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ —Å —ç–º–æ–¥–∑–∏
available_languages = {
    "en": "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "es": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π"
}

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
user_greetings = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ PCM 16kHz
def convert_audio(audio_bytes):
    process = subprocess.Popen(
        [
            "ffmpeg", "-i", "pipe:0",
            "-ar", "16000",
            "-ac", "1",
            "-f", "s16le",
            "-"
        ],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL
    )
    pcm_data, _ = process.communicate(audio_bytes)
    return pcm_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è
def recognize_audio(pcm_data, model):
    recognizer = KaldiRecognizer(model, 16000)
    recognizer.SetWords(True)
    recognizer.AcceptWaveform(pcm_data)
    result = json.loads(recognizer.FinalResult())
    text = result.get('text', '')
    confidence = 0.0
    words = result.get('result', [])
    if words:
        confidences = [word.get('conf', 0.0) for word in words]
        confidence = sum(confidences) / len(confidences)
    return text, confidence

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–Ø ü§ñ *Speech-to-Text Bot*, –∏ —è –º–æ–≥—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —Ç–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–∞—Ö! /languages üåê\n\n"
        "üì© –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n\n"
        "‚òùÔ∏è –ü–æ—Å–∫–æ–ª—å–∫—É —è –ø–æ–∫–∞ –≤ —Å—Ç–∞–¥–∏–∏ ü©º–±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—èü©º, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç 2 —Å–µ–∫—É–Ω–¥.\n"
        "–•–æ—Ç—è —è –∏–Ω–æ–≥–¥–∞ –Ω–µ–ø–ª–æ—Ö–æ —Å–ø—Ä–∞–≤–ª—è—é—Å—å –∏ —Å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ üí™, –Ω–æ —ç—Ç–æ –∫–∞–∫ –ø–æ–≤–µ–∑–µ—Ç...ü§∑‚Äç‚ôÇÔ∏è\n\n"
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ /about."
    "Hello! \n\n"
    "I am ü§ñ *Speech-to-Text Bot *, and I can convert your voice messages into text in several /languages üåê \n\n"
    "üì© Just send me a voice message, and I will recognize its contents.\n\n"
    "‚òùÔ∏è Since I am still in the stage of ü©ºBetaü©ºtestingü©º, please try to send messages from 2 seconds length.\n"
    "Although I sometimes cope well with shorter messages üí™, but it's like luck ... ü§∑Sometimes...\n\n"
    "To learn more about my possibilities, enter the team /help or /about."
        ,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(message: types.Message):
    user_id = message.from_user.id
    user_greetings.add(user_id)
    await send_welcome(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(message: types.Message):
    await message.reply(
        "‚ùì *–ü–æ–º–æ—â—å*\n\n"
        "–Ø –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —è–∑—ã–∫–∞—Ö:\n"
        f"{', '.join(available_languages.values())}\n\n"
        "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/languages - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ\n"
        "/changelog - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n"
        "/restart - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
        
        "‚ùì *Help: *\n\n"
        "I can recognize voice messages in the following languages: \n\n"
        "üìö *Available commands: *\n"
        "/start - welcome message \n"
        "/help - Show this Message of Assistance \n"
        "/languages - Show affordable recognition languages \n"
        "/about - Information about me \n"
        "/changelog - recent changes \n"
        "/restart - restart recognition models"
        ,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /languages
async def languages_command(message: types.Message):
    languages_text = "üåê *–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*\n\n"
    for code, lang in available_languages.items():
        languages_text += f"{lang} (`{code}`)\n"
    await message.reply(languages_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about
async def about_command(message: types.Message):
    await message.reply(
        "‚ÑπÔ∏è *–û–±–æ –º–Ω–µ*\n\n"
        "–Ø ü§ñ *Speech-to-Text Bot*, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "üí° *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*\n"
        "- –ò—Å–ø–æ–ª—å–∑—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É *Vosk* –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.\n"
        "- –ö–æ–¥ –Ω–∞ *Python* —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º *aiogram* –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API.\n\n"
        "üë®‚Äçüíª –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å–æ –º–Ω–æ–π!\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞ dm.ilyushko@gmail.com –∏–ª–∏ –Ω–∞–π–¥–∏ –º–µ–Ω—è –∑–¥–µ—Å—å: https://github.com/lightclove\n\n"
        "–ù–∞–¥–µ—é—Å—å, –±–æ—Ç —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –∏ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω! –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n\n"
        "–∏ –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ–∏—á–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: `/changelog` \n\n"
        
        "I am ü§ñ Speech-to-Text Bot, and I can convert your voice messages into text in several /languages üåê\n\n"
        "üì© Just send me a voice message, and I recognize its contents.\n\n"
        "‚òùÔ∏è Since I am still in the stage of ü©ºBet testingü©º, try to send messages from 2 seconds.\n\n"
        "Although I sometimes cope well with shorter messages üí™, but it's like luck ... ü§∑‚Äç‚ôÇÔ∏è\n\n"
        "To learn more about my capabilities, enter the team /help or /about.\n\n",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /changelog
async def changelog_command(message: types.Message):
    await message.reply(
        "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n\n"
        "- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `/changelog` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
        "- –£–ª—É—á—à–µ–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—ã—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.\n"
        "- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.\n\n"

        "üìù *last changes *\n\n"
        "- added the `/changelog` team to display changes. \n"
        "- Improved short messages.\n"
        "- Fixed errors and increased stability.\n"
        "- added new teams and emoji for convenience.\n\n"
        ,
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
async def restart_command(message: types.Message):
    global models
    models = {
        "en": Model("vosk-model-small-en-us-0.15"),
        "ru": Model("vosk-model-small-ru-0.4"),
        "es": Model("vosk-model-small-es-0.42")
    }
    await message.reply("üîÑ *–ú–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã.*", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_voice_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_greetings:
        user_greetings.add(user_id)
        await send_welcome(message)

    voice = message.voice
    voice_file = await bot.get_file(voice.file_id)
    voice_bytes = await bot.download_file(voice_file.file_path)
    audio_bytes = voice_bytes.read()

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ
    pcm_data = convert_audio(audio_bytes)

    texts = {}
    confidences = {}

    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª—å—é
    for lang_code, model in models.items():
        text, confidence = recognize_audio(pcm_data, model)
        texts[lang_code] = text
        confidences[lang_code] = confidence
        print(f"–ú–æ–¥–µ–ª—å: {lang_code}, –î–æ–≤–µ—Ä–∏–µ: {confidence}, –¢–µ–∫—Å—Ç: {text}")

    # –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    best_lang = max(confidences, key=confidences.get)
    best_text = texts[best_lang]

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await message.reply(
        f"üîé *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n"
        f"üåê –Ø–∑—ã–∫: {available_languages[best_lang]}\n"
        f"üìù –¢–µ–∫—Å—Ç: {best_text}",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_greetings:
        user_greetings.add(user_id)
        await send_welcome(message)

    await message.reply(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –≤–≤–µ–¥–∏ /help"
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.message.register(start_command, Command(commands=["start"]))
dp.message.register(help_command, Command(commands=["help"]))
dp.message.register(languages_command, Command(commands=["languages"]))
dp.message.register(about_command, Command(commands=["about"]))
dp.message.register(changelog_command, Command(commands=["changelog"]))
dp.message.register(restart_command, Command(commands=["restart"]))
dp.message.register(handle_voice_message, F.voice)
dp.message.register(handle_text_message, F.text & ~F.text.startswith('/'))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
